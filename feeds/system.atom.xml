<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Study Cafe - System</title><link href="/" rel="alternate"></link><link href="/feeds/system.atom.xml" rel="self"></link><id>/</id><updated>2022-03-20T23:10:00+09:00</updated><entry><title>간단한 사용법 (QEMU)</title><link href="/gandanhan-sayongbeob-qemu.html" rel="alternate"></link><published>2022-03-20T23:10:00+09:00</published><updated>2022-03-20T23:10:00+09:00</updated><author><name>darkkmj</name></author><id>tag:None,2022-03-20:/gandanhan-sayongbeob-qemu.html</id><summary type="html">&lt;p&gt;이번 글에서는 &lt;code&gt;qemu&lt;/code&gt; 시뮬레이터를 주제로 글을 작성해보겠습니다. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;qemu&lt;/code&gt; 는 가상화 소프트웨어 가운데 하나로서, 호스트 컴퓨터에 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;이번 글에서는 &lt;code&gt;qemu&lt;/code&gt; 시뮬레이터를 주제로 글을 작성해보겠습니다. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;qemu&lt;/code&gt; 는 가상화 소프트웨어 가운데 하나로서, 호스트 컴퓨터에서 다른 가상의 CPU 및 주변기기들을 포함한 완전한 컴퓨터 시스템을 에뮬레이트하는 기능을 제공하는 프로그램입니다. &lt;/p&gt;
&lt;p&gt;가령 예를 들어, &lt;code&gt;qemu&lt;/code&gt; 프로그램을 통해 가상의 ARM 계열의 CPU 환경을 구축하고 리눅스, 도스 등의 게스트 운영체제를 이 가상의 환경에서 구동시킬 수 있습니다.&lt;/p&gt;
&lt;p&gt;이런 기능을 이용해 많은 사람들이 다양한 시뮬레이터 프로그램을 통해 고가의 하드웨어 장비 없이도 유사한 환경을 구축하여 시험 및 개발을 진행하고 있을 것입니다. 물론 시뮬레이터 환경의 특성상 타겟 하드웨어의 모든 것을 커버할 수는 없다는 것을 감안해야만 합니다.&lt;/p&gt;
&lt;p&gt;얘기가 잠깐 다른 주제로 샌 것 같습니다^^. 다시 본론으로 돌아가 이번에는 &lt;code&gt;qemu&lt;/code&gt; 프로그램을 통해 ARM CPU 상에 U-Boot를 구동시키는 방법을 얘기해볼까 합니다.&lt;/p&gt;
&lt;p&gt;제가 시험해봤던 환경은 &lt;code&gt;Ubuntu&lt;/code&gt; 리눅스 환경입니다. 리눅스 설치 명령어를 이용해서 &lt;code&gt;qemu&lt;/code&gt; 및 기타 필요한 유틸리티들을 전부 설치할 수 있습니다. &lt;code&gt;U-Boot&lt;/code&gt; 는 GIT 버전관리 프로그램을 이용하여 실제 Repository에서 직접 다운로드 받아 ARM 컴파일러를 이용하여 빌드할 수 있습니다. &lt;/p&gt;
&lt;p&gt;우선 &lt;code&gt;qemu&lt;/code&gt; 프로그램을 아래와 같이 다운로드 및 설치를 해봅시다. 설치 후 아래와 같은 프로그램들이 실행가능하게 됩니다&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo apt install qemu
$ qemu
qemu-system-alpha
qemu-alpha                qemu-system-arm
qemu-arm                  qemu-system-cris
qemu-armeb                qemu-system-i386
qemu-cris                 qemu-system-lm32
qemu-i386                 qemu-system-m68k
qemu-ifdown               qemu-system-microblaze
qemu-ifup                 qemu-system-microblazeel
qemu-img                  qemu-system-mips
qemu-io                   qemu-system-mips64
qemu-m68k                 qemu-system-mips64el
qemu-make-debian-root     qemu-system-mipsel
qemu-microblaze           qemu-system-or32
qemu-microblazeel         qemu-system-ppc
qemu-mips                 qemu-system-ppc64
qemu-mipsel               qemu-system-ppcemb
qemu-nbd                  qemu-system-s390x
qemu-or32                 qemu-system-sh4
qemu-ppc                  qemu-system-sh4eb
qemu-ppc64                qemu-system-sparc
qemu-ppc64abi32           qemu-system-sparc64
qemu-s390x                qemu-system-unicore32
qemu-sh4                  qemu-system-x86_64
qemu-sh4eb                qemu-system-xtensa
qemu-sparc                qemu-system-xtensaeb
qemu-sparc32plus          qemu-unicore32
qemu-sparc64              qemu-x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;보시는 바와 같이 &lt;code&gt;Powerpc, ARM, Mips, x86&lt;/code&gt; 등등 매우 다양한 아키텍쳐를 지원하는 걸 알 수 있습니다. 우선 우리가 눈여겨 봐야하는 프로그램은 &lt;code&gt;qemu-system-arm&lt;/code&gt; 입니다. 이 프로그램을 이용해서 ARM 환경을 애뮬레이션 할 수 있게 됩니다. &lt;/p&gt;
&lt;p&gt;이제 &lt;code&gt;qemu&lt;/code&gt; 프로그램 설치가 완료되었으면, &lt;code&gt;U-Boot&lt;/code&gt; 이미지를 준비해야 합니다. &lt;code&gt;U-Boot&lt;/code&gt; 소스코드는 &lt;a href="https://source.denx.de/u-boot/u-boot"&gt;GIT Repository&lt;/a&gt;에서 다운로드가 가능하며 아래와 같은 명령어로 실행가능 합니다&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git clone git@source.denx.de:u-boot/u-boot.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 실행하면 &lt;code&gt;u-boot&lt;/code&gt;이라는 폴더가 생성된 것을 확인할 수 있습니다. 이제 &lt;code&gt;U-Boot&lt;/code&gt; 소스까지 준비가 되었다면 소스를 빌드하기 위한 크로스 컴파일러, 보통 툴체인이라고 말하는 도구가 필요합니다. 크로스 컴파일러가 필요한 이유는 호스트 환경(&lt;code&gt;x86&lt;/code&gt;)에서 &lt;code&gt;ARM CPU&lt;/code&gt; 상에서 구동 가능한 프로그램을 컴파일하기 위해 필요합니다. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ARM&lt;/code&gt; 툴체인은 &lt;code&gt;ubuntu&lt;/code&gt;에서 다음과 같이 설치 가능합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo apt-get install libc6-armel-cross libc6-dev-armel-cross binutils-arm-linux-gnueabi libncurses5-dev build-essential bison flex libssl-dev bc
&lt;span class="c1"&gt;# 툴체인은 ARM CPU 제품에 따라 선택적으로 설치하여 사용&lt;/span&gt;
$ sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
$ sudo apt-get install gcc-arm-linux-gnueabi g++-arm-linux-gnueabi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이제 툴체인까지 준비되었으면 아래와 같이 U-Boot를 빌드하여 부트로더 이미지를 만들어주면 준비는 완료됩니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CROSS_COMPILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arm-linux-gnueabi-

&lt;span class="c1"&gt;# For ARM:&lt;/span&gt;
$ make qemu_arm_defconfig
&lt;span class="c1"&gt;# For AArch64:&lt;/span&gt;
$ make qemu_arm64_defconfig

$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;U-Boot&lt;/code&gt;를 빌드하면 &lt;code&gt;U-Boot.bin&lt;/code&gt; 파일이 생성되는데 이를 이용하여 &lt;code&gt;qemu&lt;/code&gt; 상에서 부트로더로 부팅을 수행하게 됩니다. 아래와 같은 명령어를 실행하면 정상적으로 실행되는 결과를 볼 수 있게 됩니다. 추가로 디바이스를 추가하고 싶을 경우에는 아래를 참고하여 &lt;code&gt;qemu&lt;/code&gt; 실행시 옵션을 추가하여 실행하면 됩니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# For ARM:&lt;/span&gt;
$ qemu-system-arm -machine virt -bios u-boot.bin

&lt;span class="c1"&gt;# For AArch64:&lt;/span&gt;
$ qemu-system-aarch64 -machine virt -cpu cortex-a57 -bios u-boot.bin

&lt;span class="c1"&gt;## To add a Serial ATA disk via an Intel ICH9 AHCI controller, pass e.g.:&lt;/span&gt;
&lt;span class="c1"&gt;# -drive if=none,file=disk.img,id=mydisk -device ich9-ahci,id=ahci -device ide-drive,drive=mydisk,bus=ahci.0&lt;/span&gt;

&lt;span class="c1"&gt;## To add an Intel E1000 network adapter, pass e.g.:&lt;/span&gt;
&lt;span class="c1"&gt;# -netdev user,id=net0 -device e1000,netdev=net0&lt;/span&gt;

&lt;span class="c1"&gt;## To add an EHCI-compliant USB host controller, pass e.g.:&lt;/span&gt;
&lt;span class="c1"&gt;# -device usb-ehci,id=ehci&lt;/span&gt;

&lt;span class="c1"&gt;## To add a NVMe disk, pass e.g.:&lt;/span&gt;
&lt;span class="c1"&gt;# -drive if=none,file=disk.img,id=mydisk -device nvme,drive=mydisk,serial=foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;차근차근 따라해 보시면 쉽게 해보실 수 있을 것입니다. &lt;code&gt;U-Boot&lt;/code&gt; 부팅이 완료되면 프롬프트 대기 상태가 되는데 &lt;code&gt;help&lt;/code&gt; 명령을 입력하면 사용 가능한 명령어 리스트가 출력됩니다. &lt;code&gt;U-Boot&lt;/code&gt; 사용법은 문서를 참고하시기 바랍니다.&lt;/p&gt;</content><category term="System"></category></entry></feed>